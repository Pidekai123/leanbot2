import { RecursiveCharacterTextSplitter } from 'langchain/text_splitter';
import { OpenAIEmbeddings } from 'langchain/embeddings/openai';
import { PineconeStore } from 'langchain/vectorstores/pinecone';
import { pinecone } from '@/utils/pinecone-client';
import { PDFLoader } from 'langchain/document_loaders/fs/pdf';
import { PINECONE_INDEX_NAME, PINECONE_NAME_SPACE } from '@/config/pinecone';
import { DirectoryLoader } from 'langchain/document_loaders/fs/directory';
import { NextApiRequest, NextApiResponse } from 'next';

/* Name of directory to retrieve your files from 
   Make sure to add your PDF files inside the 'docs' folder
*/
const filePath = 'docs';




const run = async () => {
 
export default async function handler(req: NextApiRequest, res: NextApiResponse) {
    if (req.method === 'POST') {
      try {
        await run();
        res.status(200).json({ message: 'Ingestion complete' });
      } catch (error) {
        console.log(error);
        res.status(500).json({ error: 'Failed to ingest your data' });
      }
    } else {
      res.status(405).json({ error: 'Method not allowed' });
    }
  }
  
  
  
  
  export const run = async () => {
    try {
      /*load raw docs from the all files in the directory */
      const directoryLoader = new DirectoryLoader(filePath, {
        '.pdf': (path) => new PDFLoader(path),
      });
  
      // const loader = new PDFLoader(filePath);
      const rawDocs = await directoryLoader.load();
  
      /* Split text into chunks */
      const textSplitter = new RecursiveCharacterTextSplitter({
        chunkSize: 1000,
        chunkOverlap: 200,
      });
  
      const docs = await textSplitter.splitDocuments(rawDocs);
      console.log('split docs', docs);
  
      console.log('creating vector store...');
      /*create and store the embeddings in the vectorStore*/
      const embeddings = new OpenAIEmbeddings();
      const index = pinecone.Index(PINECONE_INDEX_NAME); //change to your own index name
  
      //embed the PDF documents
      await PineconeStore.fromDocuments(docs, embeddings, {
        pineconeIndex: index,
        namespace: PINECONE_NAME_SPACE,
        textKey: 'text',
      });
    } catch (error) {
      console.log('error', error);
      throw new Error('Failed to ingest your data');
    }
  };
  
  (async () => {
    await run();
    console.log('ingestion complete');
  })();
  


};
